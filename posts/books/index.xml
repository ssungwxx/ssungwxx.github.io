<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Books on SugnwooKim's place</title><link>https://ssungwxx.github.io/posts/books/</link><description>Recent content in Books on SugnwooKim's place</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 22 Jun 2021 23:31:46 +0900</lastBuildDate><atom:link href="https://ssungwxx.github.io/posts/books/index.xml" rel="self" type="application/rss+xml"/><item><title>Modern_java_in_action_part_2</title><link>https://ssungwxx.github.io/posts/books/modern_java_in_action_part_2/</link><pubDate>Tue, 22 Jun 2021 23:31:46 +0900</pubDate><guid>https://ssungwxx.github.io/posts/books/modern_java_in_action_part_2/</guid><description>동적 파라미터화 코드 전달하기 동적 파라미터화(Behavior parameterization)을 이용하면 자주 바뀌는 요구사항에 효과적으로 대응할 수 있다. 동적 파라미터란 아직은 어떻게 실핼할 것인지 결정하지 않은 코드 블록을 의미한다. 이 코드 블록은 나중에 프로그램에서 호출한다. 즉, 코드 블록의 실행은 나중으로 미뤄진다. 결과적으로 코드 블록에 따라 메서드의 동작이 파라미터화된다.
변화하는 요구사항에 대응하기 여기에서는 예제를 바탕으로 유연한 코드를 만드는 과정을 보여준다. 해당 예제들을 통해 유연한 코드를 어떻게 작성하였는지 직관적으로 확인할 수 있다.
첫 번째 시도: 녹색 사과 필터링</description></item><item><title>Modern_java_in_action_part_1</title><link>https://ssungwxx.github.io/posts/books/modern_java_in_action_part_1/</link><pubDate>Mon, 21 Jun 2021 22:52:28 +0900</pubDate><guid>https://ssungwxx.github.io/posts/books/modern_java_in_action_part_1/</guid><description>Java 8, 9, 10, 11 : 무슨 일이 일어나고 있는가? Java는 객체지향 모델의 언어와 JVM이라는 특성을 살려 빠르게 시장을 장악해 나갔다. 하지만, 프로그래밍 언어 생태계에 변화의 바람이 불기 시작했다. 프로그래머는 테라바이트 이상의 데이터셋에 직면하면서 멀티코어 컴퓨터나 컴퓨팅 클러스터를 이용해서 효과적으로 처리할 필요성이 커졌다. 그외에도 큰 시스템의 설계 방식도 변화의 한 요소로 꼽힌다.
이와 관련해서 Java 8의 밑바탕을 이루는 세 가지 프로그래밍 기법을 소개한다.
스트림 처리 스트림이란 한 번에 한 개씩 만들어지는 연속적인 데이터 항목들의 모임이다.</description></item><item><title>모던 자바 인 액션 스터디 시작 계기</title><link>https://ssungwxx.github.io/posts/books/modern_java_in_action_part_0/</link><pubDate>Sun, 09 May 2021 21:59:38 +0900</pubDate><guid>https://ssungwxx.github.io/posts/books/modern_java_in_action_part_0/</guid><description>읽게 된 계기 학부시절부터 SSAFY를 걸쳐 현재까지 인턴을 했을 때를 제외하고는 Java를 주 언어로 사용중이다. 하지만 Java만을 주구장창 쓰지는 않고 이것저것 다른 언어들에도 관심을 많이 가지기도 하였고 Clean code에 대한 이해도 부족으로 대부분의 시간을 헛으로 보냈다고 생각한다.
Java 8 이후의 변경점에 알게된 것도 프로젝트를 하면서가 아닌 취업준비를 하면서 알게되었다. 하지만 필요성을 느껴서 알게된 것이 아니라 면접을 위해 억지로 머릿속에 집어넣다보니 왜 써야하는 지 공감하지 못하였고 내 Java코드는 달라지지 않았다. 물론 나름대로의 변명은 있었다.</description></item><item><title>마이크로서비스 아키텍쳐 구축</title><link>https://ssungwxx.github.io/posts/books/builing_microservice/</link><pubDate>Sun, 25 Apr 2021 22:45:57 +0900</pubDate><guid>https://ssungwxx.github.io/posts/books/builing_microservice/</guid><description>마이크로서비스 아키텍쳐 구축 접하게 된 계기 맡은 작은 프로젝트가 종료되고 다른 프로젝트에 합류하기 전 까지 시간이 좀 남게되었다. 이 시간동안 무엇을 하면 좋을까 고민하고 서칭해보다가 Hashicorp Vault라는 오픈소스를 알게되었다. 마침, 사내에서 작업을 할 때 여기저기 퍼져있는 각종 VM과 DB에 대한 접속정보를 얻는것이 불편하고 신뢰할 수 있는 중앙 저장소가 있으면 좋다고 생각하였다.
이부분에 대해서 조언을 구하고자 평소 클라우드 서비스에 관심이 많은 개발자분에게 물어보았는데, 어떤 책의 PDF에서 검색을 하시더니 &amp;ldquo;음&amp;hellip; 이 책 내용에서 한 번 언급되기만 해서 저도 자세한거는 모르겠네요&amp;rdquo; 라고 하셨다.</description></item></channel></rss>